// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  SERVICE_PROVIDER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  firstName     String
  lastName      String
  phone         String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  password      String?
  status        Boolean   @default(true)
  isVerfied     Boolean   @default(false)
  token         Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String @unique
  imageUrl    String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  clients Client[]
}


// model Client {
//   id          String         @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   slug        String         @unique
//   description String?
//   eventDate   DateTime       @default(now())
//   imageUrl    String?
//   youtubeUrl  String?
//   photos      Photo[]
//   categories  PhotoCategory[]
//   categoryId  String         @db.ObjectId
//   category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
//   createdAt   DateTime       @default(now())
//   updatedAt   DateTime       @updatedAt

//   @@index([categoryId])
// }

// model PhotoCategory {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   title       String   
//   slug        String   
//   description String?
//   photos      Photo[]
//   client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
//   clientId    String   @db.ObjectId
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   @@unique([title, clientId])
//   @@unique([slug, clientId])
//   @@index([clientId])
// }

// model Photo {
//   id          String        @id @default(auto()) @map("_id") @db.ObjectId
//   url         String
//   description String?
//   clientId    String        @db.ObjectId
//   client      Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
//   categoryId  String        @db.ObjectId
//   category    PhotoCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt

//   @@index([clientId])
//   @@index([categoryId])
// }


model Client {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String         @unique
  description String?
  eventDate   DateTime       @default(now())
  imageUrl    String?
  youtubeUrl  String?
  photos      Photo[]
  categories  PhotoCategory[]
  categoryId  String         @db.ObjectId
  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isProtected Boolean        @default(false)
  password    String?

  @@index([categoryId])
}

model PhotoCategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   
  slug        String   
  description String?
  photos      Photo[]
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([title, clientId])
  @@unique([slug, clientId])
  @@index([clientId])
}

model Photo {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  description String?
  clientId    String        @db.ObjectId
  client      Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  categoryId  String        @db.ObjectId
  category    PhotoCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([clientId])
  @@index([categoryId])
}

